# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: make application-prod.yml
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.YML }}" > ./application.yml
      shell: bash

    # gradle chmod
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # gradle build
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: docker build and registry push
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_LOGIN }} --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -t ${{ secrets.DOCKER_PRIVATE_REPO }}/grwm-server:latest .
        docker push ${{ secrets.DOCKER_REPO }}/grwm-server:latest

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build
    
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: deploy k8s
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ DOCKER_LOGIN }} --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            export NCLOUD_ACCESS_KEY=${{ secrets.NCLOUD_ACCESS_KEY }}
            export NCLOUD_SECRET_KEY=${{ secrets.NCLOUD_SECRET_KEY }}
            export NCLOUD_API_GW=https://ncloud.apigw.ntruss.com
            export NCLOUD_PROFILE=project
            export PATH=$PATH:$HOME/bin
            kubectl --kubeconfig="/root/kubeconfig.yml" set image deployment/grwm-server-deployment grwm-server-deployment=grwm-registry.kr.ncr.ntruss.com/grwm-server:latest --record
            if ! kubectl --kubeconfig="/root/kubeconfig.yml" rollout status deployment/grwm-server-deployment --timeout=60s; then
              echo "Deployment failed, starting rollback..."
              kubectl --kubeconfig="/root/kubeconfig.yml" rollout undo deployment/grwm-server-deployment
              echo "Rollback completed."
            else
              echo "Deployment succeeded."
            fi
